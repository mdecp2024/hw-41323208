var tipuesearch = {"pages": [{'title': 'about', 'text': 'Department of Mechanical Design Engineering, National Huwei University of Science and Technology \n National Taiwan University \n Department of Mechanical Design Engineering \n cp2024 computer program \n Course materials: \n Learn Python using Jupyter  (  website  ,  e-book  ) \n Education version account microsoftonline login point:\xa0  https://login.microsoftonline.com/ \n Team online teaching: \n Log in to https://login.microsoftonline.com/  Office 365  with "student ID@nfu.edu.tw" \n Teams team code: fpqabi8 \n Personal Ethereum:  https://github.com/mdecp2024/hw-41323208 \n Personal website:  https://mdecp2024.github.io/hw-41323208 \n Additional information: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n Website password: admin \n', 'tags': '', 'url': 'about.html'}, {'title': 'Attendance', 'text': 'Number of attendees (10%) – self-evidence scoring \n Use Github to submit submission records for scoring. \n \n \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': 'Topic: Browser-based decentralized version management and integrated solution development environment (10%) \n USB flash drive: \n Download  python_2025_lite.7z  (428 MB, about 1.5 GB after unzipping) \n Jupiter \n What are Github and Codespace? \n Hello World - GitHub Documentation \n Use a string containing your student ID as an account to apply for free use of Github. \n Python course materials:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n Part 1: Establish basic knowledge and organize information (10%) \n After starting the portable program system, in the command line: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n Enter  01_string_input_print.ipynb  to practice how to modify the PART1 notebook and save it. After uploading it to the download directory in the homework document, embed the  submitted  01_string_input_print.ipynb into the following web page through  https://nbviewer.org/  . \n \n The html syntax of the iframe annotation listed above: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n After completing the above process, enter the HW1 self-evaluation score into the cp2024 self-evaluation form. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'Hardware 1 exam', 'text': 'Practice good procedures in groups of six \n Through the excellent webpage of Jupyterlab, each group is assigned to write programming exercises related to topic 1 in turn, and edit the webpage content (localhost and Codespaces environment). \n', 'tags': '', 'url': 'Hardware 1 exam.html'}, {'title': 'w7', 'text': 'https://youtu.be/hoAvAYwxQdU \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '題目一 \n \n 題目二 \n \n 題目三 \n 心得：覺得Python不僅可以繪製矩形 還能用Python解決物理和數學題目 期待之後能學到如何用Python製作小遊戲 \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'HW\xa02', 'text': 'Topic: Python’s sequence, judgmental expressions and repeated loops (20%) \n Python course materials:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n Manila HW 1 web page data collection and program practice methods, organize the following (20%): \n Part 2: Introduction to lists and if/else statements \n Part 3: Introduction to for loops \n After completing the above process, enter the HW2 self-evaluation score into the cp2024 self-evaluation form. \n', 'tags': '', 'url': 'HW\xa02.html'}, {'title': 'Hardware 2 exam', 'text': "Practice good procedures in groups of six \n Through Jupyterlab's excellent web pages, each group is assigned to take turns to write HW 2-related program exercises and edit web content (localhost and Codespaces environments). \n \n", 'tags': '', 'url': 'Hardware 2 exam.html'}, {'title': '三角形示範程式', 'text': "def draw_triangle():\n    height = 5  # 三角形高度\n    for i in range(height):\n        spaces = ' ' * (height - i - 1)  # 计算空格数\n        stars = '*' * (2 * i + 1)        # 计算星号数\n        print(spaces + stars)\n\ndraw_triangle()\n \n \n", 'tags': '', 'url': '三角形示範程式.html'}, {'title': '可攜程式操作', 'text': '\n 操作步驟: \n \n 下載\xa0 python_2025_lite.7z \xa0(可攜程式環境) \n 下載 \xa0 zmq_remote_api_ex_cube_triangle.7z \xa0(利用 Python 控制模擬場景中的物件) \n 進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式, \xa0 原始碼 ) \n 啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器 \n 執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出: \n netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050 netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050 \n 開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream \n 利用 SciTE 開啟\xa0put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式 \n 使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景 \n \n \n 1a site and re \n \n', 'tags': '', 'url': '可攜程式操作.html'}, {'title': 'w11_hw', 'text': '心得：chatGPT很好的幫我解決了python程式上不理解的問題 還用python繪製圖案 \n 题目一 \n 题目二 \n ----------------------------------------------------------------------------------------------------------------- \n def print_filled_circle(radius, center_x, center_y, size=10):\n    for y in range(size):\n        for x in range(size):\n            # 計算 (x, y) 點到圓心的距離\n            distance = (x - center_x) ** 2 + (y - center_y) ** 2\n            # 如果距離小於或等於半徑的平方，則是圓內的點，打印 *\n            if distance <= radius ** 2:\n                print(\'*\', end=\'\')\n            else:\n                print(\' \', end=\'\')\n        print()\n\n# 設定圓心在 (4, 4)，半徑為 4\nprint_filled_circle(radius=4, center_x=4, center_y=4) \n ----------------------------------------------------------------------------------------------------------------- \n from browser import html\nfrom browser import document as doc\n\n# 创建画布\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每个方块的大小\ngs = 20\n\n# 获取画布的 2D 上下文\nctx = canvas.getContext("2d")\n\n# 绘制带白色边框的矩形（黑色填充）\ndef dRect(lux, luy, w, h, fill_color=\'#000000\', border_color=\'#ffffff\', border_width=2):\n    # 先填充黑色\n    ctx.fillStyle = fill_color\n    ctx.fillRect(lux, luy, w, h)\n    \n    # 再绘制白色边框\n    ctx.lineWidth = border_width\n    ctx.strokeStyle = border_color\n    ctx.strokeRect(lux, luy, w, h)\n\n# 绘制由黑色方块和白色边框拼成的圆形图案\ndef drawCircleWithBlackSquaresAndWhiteBorders(radius):\n    # 画布的中心点\n    cx, cy = canvas.width // 2, canvas.height // 2\n    # 计算网格数\n    for i in range(-radius, radius, gs):\n        for j in range(-radius, radius, gs):\n            # 当前网格的中心坐标\n            x = cx + i\n            y = cy + j\n            # 计算该网格到中心的距离\n            dist = (i ** 2 + j ** 2) ** 0.5\n            # 如果该网格的距离小于圆的半径，填充方块并绘制边框\n            if dist < radius:\n                dRect(x, y, gs, gs, fill_color="black", border_color="white", border_width=1)  # 黑色填充，白色边框\n\n# 绘制由黑色方块和白色边框填充的圆形\ndrawCircleWithBlackSquaresAndWhiteBorders(100) \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12', 'text': '题目一 \n n = 11\nspace = \'_\'\ncenter = n//2\n#print(center)\n\nfor y in range(n):\n  for x in range(n):\n    print("(", x, ",", y, ")") \n 题目二 \n from browser import html\nfrom browser import document as doc\n\n#利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400, height = 400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n#每一格的 pixel数\ngs = 20\n\n#gste canvas width and height\nctx = canvas.getContext("2d")\n\nwidth = 11\nheight = 11\n\n\'\'\'\nctx.lineWidth = 1\nctx.strokeStyle = \'lightgrey\'\nctx.beginPath()\n#ctx.rect(i*gs, j"gs, gs, gs)\nctx.rect(0, 0, 150, 100)\nctx.stroke()\n\'\'\'\n\nfor i in range(width):\n    for j in range(height):\n        ctx.lineWidth = 1\n        ctx.strokeStyle = \'lightgrey\'\n        ctx.beginPath();\n        ctx.rect(i*gs, j*gs, gs, gs)\n        ctx.stroke();\n#dRect(igs.jgs, gs, gs. 1, lightgrey")\n \n \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w12_hw', 'text': '第一題——input() and print() \n 程式一： 輸入姓名 \n 程式二： 貓貓 \n 第二題——變數 \n 程式一： 姓名 \n 程式二： name and favorite food \n 第三題——if判斷 \n 程式一： 賣書 \n 第四題——append() and remove() \n 程式一： 購物清單 \n 第五題—— index().pop and \xa0 insert() \n 程式一： 菜單 \n 第六題——取其中數 \n 程式一： Town \n \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': '程式一 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件，設定為 400x400 像素\ncanvas = html.CANVAS(width=400, height=400)  # 增加畫布的大小以顯示第二個方框\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 設定 canvas 相關參數\nctx = canvas.getContext("2d")\n\n# 設置最細邊框的寬度\nborder_width = 1\n\n# 畫第一個紅色邊框\nctx.fillStyle = \'red\'\n# 上邊框\nctx.fillRect(0, 0, 200, border_width)\n# 下邊框\nctx.fillRect(0, 200 - border_width, 200, border_width)\n# 左邊框\nctx.fillRect(0, 0, border_width, 200)\n# 右邊框\nctx.fillRect(200 - border_width, 0, border_width, 200)\n\n# 畫第一個白色中心方形\nctx.fillStyle = \'white\'\nctx.fillRect(border_width, border_width, 200 - 2 * border_width, 200 - 2 * border_width)\n\n# 第二個方框的大小（200x200）\nsecond_border_width = 1\nsecond_width = 200  # 第二個方框的寬度，擴大為 200\nsecond_height = 200  # 第二個方框的高度，擴大為 200\n\n# 計算第二個方框的左上角位置，使其整體位於第一個方框的右下角\nsecond_x = 100  # 第二個方框的 x 坐標，設置為 200\nsecond_y = 100  # 第二個方框的 y 坐標，設置為 200\n\n# 畫第二個紅色邊框\nctx.strokeStyle = \'red\'  # 邊框顏色設置為紅色\nctx.lineWidth = second_border_width  # 邊框寬度設置為最細\nctx.strokeRect(second_x, second_y, second_width, second_height)  # 畫紅色邊框\n\n# 填充透明的中心區域（不填充顏色）\nctx.fillStyle = \'transparent\'\nctx.fillRect(second_x + second_border_width, second_y + second_border_width, second_width - 2 * second_border_width, second_height - 2 * second_border_width)\n\n# 顯示 canvas\n \n 程式二 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件，設定為 600x600 像素\ncanvas = html.CANVAS(width=600, height=600)  # 增加畫布的大小\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 設定 canvas 相關參數\nctx = canvas.getContext("2d")\n\n# 設置圓形的邊框寬度\ncircle_border_width = 1\n\n# 先畫圓形1（天晴色圓形）\ncircle_center_x = 250  # 圓心x坐標（畫布的正中心）\ncircle_center_y = 250  # 圓心y坐標（畫布的正中心）\ncircle_radius = 141.4  # 圓的半徑\n\nctx.beginPath()\nctx.arc(circle_center_x, circle_center_y, circle_radius, 0, 2 * 3.1416)  # 畫圓\nctx.fillStyle = \'skyblue\'  # 填充顏色設為天晴色\nctx.fill()  # 填充圓形\nctx.strokeStyle = \'black\'  # 邊框顏色設置為黑色\nctx.lineWidth = circle_border_width  # 邊框寬度設置為1\nctx.stroke()  # 畫出圓形的邊框\n\n# 新增第二個圓形（淺綠色圓形）\nsecond_circle_center_x = 350  # 第二個圓形的圓心x坐標\nsecond_circle_center_y = 350  # 第二個圓形的圓心y坐標\nsecond_circle_radius = 141.4  # 第二個圓形的半徑\n\n# 先畫第二個圓形（淺綠色圓形）\nctx.beginPath()\nctx.arc(second_circle_center_x, second_circle_center_y, second_circle_radius, 0, 2 * 3.1416)  # 畫圓\nctx.fillStyle = \'lightgreen\'  # 填充顏色設為淺綠色\nctx.fill()  # 填充圓形\nctx.strokeStyle = \'black\'  # 邊框顏色設置為黑色\nctx.lineWidth = circle_border_width  # 邊框寬度設置為1\nctx.stroke()  # 畫出圓形的邊框\n\n# 畫第一個紅色方框（內部透明，邊框紅色）\nctx.fillStyle = \'transparent\'  # 內部填充為透明\nctx.fillRect(150, 150, 200, 200)  # 填充矩形區域（不會顯示顏色，因為是透明的）\nctx.strokeStyle = \'red\'  # 邊框顏色設為紅色\nctx.lineWidth = 1  # 邊框寬度設為1\nctx.strokeRect(150, 150, 200, 200)  # 畫紅色邊框\n\n# 畫第二個紅色方框（內部透明，邊框紅色）\nsecond_x = 250  # 第二個方框的 x 坐標，設置為第一個方框的右下角 x 坐標\nsecond_y = 250  # 第二個方框的 y 坐標，設置為第一個方框的右下角 y 坐標\nctx.fillStyle = \'transparent\'  # 內部填充為透明\nctx.fillRect(second_x, second_y, 200, 200)  # 填充矩形區域（不會顯示顏色，因為是透明的）\nctx.strokeStyle = \'red\'  # 邊框顏色設為紅色\nctx.lineWidth = 1  # 邊框寬度設為1\nctx.strokeRect(second_x, second_y, 200, 200)  # 畫紅色邊框\n\n# 顯示 canvas \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_hw', 'text': '程式： 三個隨機顏色交疊圓 \n from browser import html\nfrom browser import document as doc\nimport random\nimport math\n\n# 定義一個函式來初始化畫布\ndef initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):\n    # 創建 canvas 並設置寬度與高度\n    canvas = html.CANVAS(width=canvas_width, height=canvas_height)\n    brython_div = doc[id]\n    brython_div <= canvas\n    \n    # 獲取 canvas 的 2D 上下文\n    ctx = canvas.getContext("2d")\n    return canvas, ctx\n\n# 定義一個隨機顏色生成函式\ndef random_color_generator():\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    return f"rgb({r}, {g}, {b})"\n\n# 判斷點 (px, py) 是否在圓內\ndef is_point_in_circle(px, py, cx, cy, r):\n    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2\n\n# 使用者設定的圓心座標和半徑，並進行掃描線填充\ndef draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):\n    # 初始化畫布\n    canvas, ctx = initialize_canvas(400, 400)\n    \n    # 清除畫布\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    \n    # 顏色區域存儲\n    color_dict = {}\n\n    # 使用掃描線方法填充區域\n    for py in range(0, canvas.height):\n        for px in range(0, canvas.width):\n            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)\n            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)\n            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)\n\n            # 判斷邏輯：決定顏色\n            if in_circle1 and in_circle2 and in_circle3:\n                # 交集區域（所有圓重疊）\n                if "intersection_all" not in color_dict:\n                    color_dict["intersection_all"] = random_color_generator()\n                current_color = color_dict["intersection_all"]\n            elif in_circle1 and in_circle2:\n                if "intersection_12" not in color_dict:\n                    color_dict["intersection_12"] = random_color_generator()\n                current_color = color_dict["intersection_12"]\n            elif in_circle1 and in_circle3:\n                if "intersection_13" not in color_dict:\n                    color_dict["intersection_13"] = random_color_generator()\n                current_color = color_dict["intersection_13"]\n            elif in_circle2 and in_circle3:\n                if "intersection_23" not in color_dict:\n                    color_dict["intersection_23"] = random_color_generator()\n                current_color = color_dict["intersection_23"]\n            elif in_circle1:\n                if "circle1" not in color_dict:\n                    color_dict["circle1"] = random_color_generator()\n                current_color = color_dict["circle1"]\n            elif in_circle2:\n                if "circle2" not in color_dict:\n                    color_dict["circle2"] = random_color_generator()\n                current_color = color_dict["circle2"]\n            elif in_circle3:\n                if "circle3" not in color_dict:\n                    color_dict["circle3"] = random_color_generator()\n                current_color = color_dict["circle3"]\n            else:\n                # 點不在任何圓內，畫外區域\n                current_color = "white"  # 背景色白色\n\n            # 填充顏色\n            ctx.fillStyle = current_color\n            ctx.fillRect(px, py, 1, 1)  # 填充一個像素\n\n# 直接設定三個圓的圓心和半徑\nx1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100\nx2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100\nx3, y3, r3 = 200, 115, 100   # 圓3：圓心 (200, 150)，半徑 100\n\n# 呼叫畫圓函式\ndraw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3) \n \n', 'tags': '', 'url': 'w14_hw.html'}, {'title': 'w15', 'text': '題目一： 從 1 累加到 100 \n 題目二： 輸入兩個數字計算兩個數字間的所有數字總和 \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'HW\xa03', 'text': '\n Topic: Numbers, Algorithms and Loops in Python (20%) \n Python course materials:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n After completing the above process, enter the HW3 self-evaluation score into the cp2024 self-evaluation form. \n', 'tags': '', 'url': 'HW\xa03.html'}, {'title': 'Hardware 3 exam', 'text': "Practice good procedures in groups of six \n Through Jupyterlab's excellent web pages, each group is assigned to take turns to write HW 3-related program exercises and edit web content (localhost and Codespaces environments). \n", 'tags': '', 'url': 'Hardware 3 exam.html'}, {'title': 'HW\xa04', 'text': 'Topic: Using Python to control electromechanical simulation systems (20%) \n Use\xa0  https://solvespace.com/  \xa0to build mechanical system components \n Use  CoppeliaSim  to build an electromechanical simulation system \n Using  Python  to control the electromechanical analog system on the browser across the network \n example: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n After completing the above process, enter the HW4 self-evaluation score into the cp2024 self-evaluation form. \n', 'tags': '', 'url': 'HW\xa04.html'}, {'title': 'Hardware 4 exam', 'text': "Practice good procedures in groups of six \n Through Jupyterlab's excellent web pages, each group is assigned to take turns to write HW 4-related program exercises and edit web content (localhost and Codespaces environments). \n", 'tags': '', 'url': 'Hardware 4 exam.html'}, {'title': 'final report', 'text': 'Final dental and written special report (20%) \n Final oral report video: \n ..... \n Final written special report file (pdf): \n ..... \n Summary of computer-aided design and internship course: \n ..... \n Final self-reported evaluation scores: \n After completing the above process, accept the final report self-evaluation score and enter it into the cp2024 self-evaluation form. \n', 'tags': '', 'url': 'final report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};